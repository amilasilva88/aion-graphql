type Query {

    blockApi: BlockQuery

    txnApi: TxnQuery

    accountApi: AccountQuery

    adminApi: AdminQuery

    chainApi: ChainQuery

    netApi: NetQuery

    walletApi: WalletQuery
}

type Mutation {

    accountApi: AccountMutator

    walletApi: WalletMutator

    txnApi: TxnMutator
}

type BlockQuery {
    blocks(first: Long = 10, offset: Long = -1): [Block]
    block(number: Long!): Block
}

type TxnQuery {
    transaction(txHash: String!): TxDetails
    transactions(fromBlock: Long = -1, limit: Long!): [TxDetails]
}

type AccountQuery {
    account(publicKey: String!, blockNumber: Long = -1) : Account
}

type AdminQuery {
    accountsByAddressString(addresses: String!): [Account]
    accounts(addresses: [String]!): [Account]

    #blockByHash(hash: String!): Block
    blockByNumber(number: Long!): Block

    blocksByLatest(count: Long!): [Block]
    blocksByNumber(numbers: [Long]!): [Block]
    blocksByRange(blockStart: Long!, blockEnd: Long!): [Block]

    blocks(first: Long!, offset: Long!): [Block]
}

type ChainQuery {
    blockNumber: Long
    balance(address: String!): BigInteger
    balanceByBlockNumber(address: String!, blockNumber: Long!): BigInteger

    blockByHash(hash: String!): Block
    blockByNumber(number: Long!): Block

    blockTransactionCountByHash(hash: String!): Long
    blockTransactionCountByNumber(number: Long!): Long

    nonce(address: String!): BigInteger
    #storageAt(address: String!, postion: Int): String
    #storageAtByBlockNumber(address: String!, blockNumber: Long!, postion: Int): String

    transactionByBlockNumberAndIndex(blockNumber: Long!, index: Long!): TxDetails
    transactionByHash(txHash: String!): TxDetails
    transactionCount(addres: String!, blockNumber: Long!): Long

}

type NetQuery {
    isSyncing: Boolean
    protocol: Protocol
    # activeNodes: [NodeInfo]
}

type WalletQuery {
    #Wallet service apis
    accounts: [String]
    defaultAccount: String
    minerAccount: String
}

#For mutation
type AccountMutator {
    accountCreate(passphrase: [String!], privateKey: Boolean = false): [AccountKey]
    accountExport(keys: [AccountKeyExportInput!]): AccountKeyExport
    accountBackup(keys: [AccountKeyExportInput!]): AccountKeyExport
    #Return list of accounts which cannot be imported
    accountImport(privateKey: String!, passphrase: String!): Boolean
}

type WalletMutator {
    lockAccount(accountAddress: String!, passphrase: String!): Boolean
    unlockAccount(accountAddress: String!, passphrase: String!, duration: Int = 60): Boolean
}

type TxnMutator {
    compile(code: String!): CompileResponse
    sendTransaction(txArgs: TxArgsInput!): MsgResp
}


#scalar Hash256
#scalar Address

#type Block {
#    number: Long
#    nrgConsumed: Long
#    nrgLimit: Long
#    bloom: String # ByteArrayWrapper
#    extraData: String #ByteArrayWrapper
#    solution: String #ByteArrayWrapper
#    hash: Hash256
#    parentHash: Hash256
#    nonce: BigInteger
#    difficulty: BigInteger
#    totalDifficulty: BigInteger
#    minerAddress: Address
#    stateRoot: Hash256
#    txTrieRoot: Hash256
#    size: Int
#    txDetails: [TxDetails]
#    blockTime: Long
#}

type Block {
    number: Long
    nrgConsumed: Long
    nrgLimit: Long
    bloom: String # ByteArrayWrapper
    extraData: String #ByteArrayWrapper
    solution: String #ByteArrayWrapper
    hash: String #Hash256
    parentHash: String #Hash256
    nonce: BigInteger
    difficulty: BigInteger
    totalDifficulty: BigInteger
    minerAddress: String #Address
    stateRoot: String #Hash256
    txTrieRoot: String #Hash256
    size: Int
    txDetails: [TxDetails]
    blockTime: Long
}


#type Transaction {
#    transactionIndex: Int
#    blockNumber: Long
#    timeStamp: Long
#    nrgConsumed: Long
#    nrgPrice: Long
#    from: Address
#    to: Address
#    blockHash: Hash256
#    txHash: Hash256
#    nonce: BigInteger
#    value: BigInteger
#    data: String #ByteArrayWrapper
#}

#type TxDetails {
#    from: Address
#    to: Address
#    txHash: Hash256
#    value: BigInteger
#    nonce: BigInteger
#    nrgConsumed: Long
#    nrgPrice: Long
#    data: String
#    txIndex: Int
#    contract: Address
#    timestamp: Long
#    error: String
#}

type TxDetails {
    from: String
    to: String
    txHash: String
    value: BigInteger
    nonce: BigInteger
    nrgConsumed: Long
    nrgPrice: Long
    data: String
    txIndex: Int
    contract: String
    timestamp: Long
    error: String
    blockNumber: Long
    blockHash: String
}

type Account {
    publicKey: String
    balance: BigInteger
    #transactions: [TxDetails]
}

type AccountKey {
    publicKey: String
    privateKey: String
    passphrase: String
}

type AccountKeyExport {
    keyfiles: [String]
    invalidAddr: [String]
}

input AccountKeyExportInput {
    publicKey: String
    passphrase: String
}


type Protocol {
    api: String
    db: String
    kernel: String
    miner: String
    net: String
    txpool: String
    vm: String
}

#contract
type CompileResponse {
   # abiDefinition: [ContractAbiEntry]
    abiDefString: String
    code: String
    compilerOptions: String
    compilerVersion: String
  #  developerDoc: String
    language: String
    languageVersion: String
    source: String
   # userDoc: String
}

type ContractAbiEntry {
    anonymous: Boolean
    constant: Boolean
    inputs: [ContractAbiIOParam]
    name: String
    outputs: [ContractAbiIOParam]
    payable: Boolean
    type: String

}

type ContractAbiIOParam {
    name: String
    paramLengths: [Int]
    type: String
    indexed: Boolean

}

#Txn input
input TxArgsInput {
    from: String
    to: String
    value: BigInteger
    data: String
    nonce: BigInteger
    nrgLimit: Long
    nrgPrice: Long
}

type MsgResp {
    status: String
    msgHash: String
    txHash: String
    txResult: String
    txDeploy: String
    error: String
}