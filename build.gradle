buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply plugin: 'application'

group = 'org.satran.blockchain'

description = "aion-graphql"

sourceCompatibility = 1.9

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

repositories {

    mavenCentral()
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'

    compile group: 'com.graphql-java', name: 'graphql-java-tools', version:'5.2.4'
    compile group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version:'5.0.2'
    compile group: 'com.graphql-java', name: 'graphiql-spring-boot-starter', version:'4.0.0'

    compile group: 'org.apache.commons', name: 'commons-pool2', version:'2.2'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version:'1.9.3'

    compile "io.reactivex.rxjava2:rxjava:2.1.5"

    compile fileTree(include: ['*.jar'], dir: 'lib')
    compile fileTree(include: ['*.jar'], dir: 'lib/lib')

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

mainClassName = 'org.satran.blockchain.graphql.ChainGraphQLApplication'

applicationDefaultJvmArgs = ["-Dfile.encoding=utf8", "-Dlogging.config=config/logback.xml"]

jar {
    enabled = true
}

[bootJar, bootDistTar, bootDistZip]*.enabled = false

distZip {
    eachFile { it.duplicatesStrategy = 'exclude'};
}

distributions {
    main {
        baseName = 'aion-graphql-dist'

        contents {

            from('native') {
                into('native')
            }

            from('LICENSE')

            from('src/main/resources') {
                into('config')
                include 'application.yml'
            }

            from('config') {
                into('config')
                include 'logback.xml'
            }
        }
    }
}

release {
    failOnUnversionedFiles = false
    failOnUpdateNeeded = false

    scmAdapters = [
            net.researchgate.release.GitAdapter,
    ]

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}

/** Integration tests **/
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

}

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.java.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [ configurations.integrationTestCompile ]
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

check.dependsOn integrationTest
/** Integration tests Ends here **/


