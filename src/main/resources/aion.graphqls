type Query {
    blocks(first: Long = 10, offset: Long = -1): [Block]
    block(number: Long!): Block
    transaction(txHash: Hash256!): Transaction
    transactions(fromBlock: Long = -1, limit: Long!): [TxDetails]
}

type Mutation {

    accountCreate(passphrase: [String!], privateKey: Boolean = false): [AccountKey]
    accountExport(keys: [AccountKeyExportInput!]): AccountKeyExport
    accountBackup(keys: [AccountKeyExportInput!]): AccountKeyExport
    #Return list of accounts which cannot be imported
    accountImport(privateKey: String!, passphrase: String!): Boolean

}

scalar Hash256
scalar Address

#type Block {
#    number: Long
#    nrgConsumed: Long
#    nrgLimit: Long
#    bloom: String # ByteArrayWrapper
#    extraData: String #ByteArrayWrapper
#    solution: String #ByteArrayWrapper
#    hash: Hash256
#    parentHash: Hash256
#    nonce: BigInteger
#    difficulty: BigInteger
#    totalDifficulty: BigInteger
#    minerAddress: Address
#    stateRoot: Hash256
#    txTrieRoot: Hash256
#    size: Int
#    txDetails: [TxDetails]
#    blockTime: Long
#}

type Block {
    number: Long
    nrgConsumed: Long
    nrgLimit: Long
    bloom: String # ByteArrayWrapper
    extraData: String #ByteArrayWrapper
    solution: String #ByteArrayWrapper
    hash: String #Hash256
    parentHash: String #Hash256
    nonce: BigInteger
    difficulty: BigInteger
    totalDifficulty: BigInteger
    minerAddress: String #Address
    stateRoot: String #Hash256
    txTrieRoot: String #Hash256
    size: Int
    txDetails: [TxDetails]
    blockTime: Long
}


type Transaction {
    transactionIndex: Int
    blockNumber: Long
    timeStamp: Long
    nrgConsumed: Long
    nrgPrice: Long
    from: Address
    to: Address
    blockHash: Hash256
    txHash: Hash256
    nonce: BigInteger
    value: BigInteger
    data: String #ByteArrayWrapper
}

#type TxDetails {
#    from: Address
#    to: Address
#    txHash: Hash256
#    value: BigInteger
#    nonce: BigInteger
#    nrgConsumed: Long
#    nrgPrice: Long
#    data: String
#    txIndex: Int
#    contract: Address
#    timestamp: Long
#    error: String
#}

type TxDetails {
    from: String
    to: String
    txHash: String
    value: BigInteger
    nonce: BigInteger
    nrgConsumed: Long
    nrgPrice: Long
    data: String
    txIndex: Int
    contract: String
    timestamp: Long
    error: String
}

type AccountKey {
    publicKey: String
    privateKey: String
    passphrase: String
}

type AccountKeyExport {
    keyfiles: [String]
    invalidAddr: [String]
}

input AccountKeyExportInput {
    publicKey: String
    passphrase: String
}