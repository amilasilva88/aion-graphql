type Query {

    blockApi: BlockQuery

    txnApi: TxnQuery

    accountApi: AccountQuery

    adminApi: AdminQuery

    chainApi: ChainQuery

    netApi: NetQuery

    walletApi: WalletQuery
}

type Mutation {

    accountApi: AccountMutator

    walletApi: WalletMutator

    txnApi: TxnMutator
}

type BlockQuery {
    blocks(first: Long = 10, offset: Long = -1): [Block]
    block(number: Long!): Block
}

type TxnQuery {
    transaction(txHash: String!): TxDetails
    transactions(fromBlock: Long = -1, limit: Long!): [TxDetails]

    estimateNrg(code: String!): Long
    estimateNrgByTxArgs(txArgs: TxArgsInput!): Long

    code(address: String!, blockNumber: Long = -1): String

    msgStatus(msgHash: String!): MsgResp
    nrgPrice: Long
    solcVersion: String
    txReceipt(txnHash: String!): TxReceipt

}

scalar Map

type TxnMutator {

    call(args: TxArgsInput!): String
    compile(code: String!): Map
    contractDeploy(contractDeploy: ContractDeployInput!): [DeployResponse]

    eventDeregister(evts: [String], address: String): Boolean
    eventRegister(evts: [String]!, eventFilter: ContractEventFilterInput!, address: String!): Boolean

    fastTxBuild(args: TxArgsInput!, call: Boolean!): Boolean

    sendRawTransaction(encodedTx: String!): MsgResp
    sendSignedTransaction(txArgs: TxArgsInput!, privateKey: String!): MsgResp
    sendTransaction(txArgs: TxArgsInput!): MsgResp

}

type AccountQuery {
    account(publicKey: String!, blockNumber: Long = -1) : Account
}

type AdminQuery {
    accountsByAddressString(addresses: String!): [Account]
    accounts(addresses: [String]!): [Account]

    #blockByHash(hash: String!): Block
    blockByNumber(number: Long!): Block

    blocksByLatest(count: Long!): [Block]
    blocksByNumber(numbers: [Long]!): [Block]
    blocksByRange(blockStart: Long!, blockEnd: Long!): [Block]

    blocks(first: Long!, offset: Long!): [Block]
}

type ChainQuery {
    blockNumber: Long
    balance(address: String!): BigInteger
    balanceByBlockNumber(address: String!, blockNumber: Long!): BigInteger

    blockByHash(hash: String!): Block
    blockByNumber(number: Long!): Block

    blockTransactionCountByHash(hash: String!): Long
    blockTransactionCountByNumber(number: Long!): Long

    nonce(address: String!): BigInteger
    storageAt(address: String!, postion: Int!, blockNumber: Long = 0): String
    
    transactionByBlockNumberAndIndex(blockNumber: Long!, index: Long!): TxDetails
    transactionByHash(txHash: String!): TxDetails
    transactionCount(addres: String!, blockNumber: Long!): Long

}

type NetQuery {
    isSyncing: Boolean
    protocol: Protocol
    # activeNodes: [NodeInfo]
}

type WalletQuery {
    #Wallet service apis
    accounts: [String]
    defaultAccount: String
    minerAccount: String
}

#For mutation
type AccountMutator {
    accountCreate(passphrase: [String!], privateKey: Boolean = false): [AccountKey]
    accountExport(keys: [AccountKeyExportInput!]): AccountKeyExport
    accountBackup(keys: [AccountKeyExportInput!]): AccountKeyExport
    #Return list of accounts which cannot be imported
    accountImport(privateKey: String!, passphrase: String!): Boolean
}

type WalletMutator {
    lockAccount(accountAddress: String!, passphrase: String!): Boolean
    unlockAccount(accountAddress: String!, passphrase: String!, duration: Int = 60): Boolean
}

type Block {
    number: Long
    nrgConsumed: Long
    nrgLimit: Long
    bloom: String
    extraData: String
    solution: String
    hash: String
    parentHash: String
    nonce: BigInteger
    difficulty: BigInteger
    totalDifficulty: BigInteger
    minerAddress: String
    stateRoot: String
    txTrieRoot: String
    size: Int
    txDetails: [TxDetails]
    blockTime: Long
}

type TxDetails {
    from: String
    to: String
    txHash: String
    value: BigInteger
    nonce: BigInteger
    nrgConsumed: Long
    nrgPrice: Long
    data: String
    txIndex: Int
    contract: String
    timestamp: Long
    error: String
    blockNumber: Long
    blockHash: String
}

type Account {
    publicKey: String
    balance: BigInteger
    #transactions: [TxDetails]
}

type AccountKey {
    publicKey: String
    privateKey: String
    passphrase: String
}

type AccountKeyExport {
    keyfiles: [String]
    invalidAddr: [String]
}

input AccountKeyExportInput {
    publicKey: String
    passphrase: String
}


type Protocol {
    api: String
    db: String
    kernel: String
    miner: String
    net: String
    txpool: String
    vm: String
}

#contract
type CompileResponse {
    abiDefinition: [ContractAbiEntry]
    abiDefString: String
    code: String
    compilerOptions: String
    compilerVersion: String
#    developerDoc: String
    language: String
    languageVersion: String
    source: String
   # userDoc: String
}

input CompileResponseInput {
    abiDefinition: [ContractAbiEntryInput]
    abiDefString: String
    code: String
    compilerOptions: String
    compilerVersion: String
    #  developerDoc: String
    language: String
    languageVersion: String
    source: String
    # userDoc: String
}

type ContractAbiEntry {
    anonymous: Boolean
    constant: Boolean
    inputs: [ContractAbiIOParam]
    name: String
    outputs: [ContractAbiIOParam]
    payable: Boolean
    type: String

}

input ContractAbiEntryInput {
    anonymous: Boolean
    constant: Boolean
    inputs: [ContractAbiIOParamInput]
    name: String
    outputs: [ContractAbiIOParamInput]
    payable: Boolean
    type: String

}

type ContractAbiIOParam {
    name: String
    paramLengths: [Int]
    type: String
    indexed: Boolean

}

input ContractAbiIOParamInput {
    name: String
    paramLengths: [Int]
    type: String
    indexed: Boolean

}

#Txn input
input TxArgsInput {
    from: String!
    to: String!
    value: BigInteger
    data: String
    nonce: BigInteger
    nrgLimit: Long
    nrgPrice: Long
}

type MsgResp {
    status: String
    msgHash: String
    txHash: String
    txResult: String
    txDeploy: String
    error: String
}

input ContractDeployInput {
   # compileResponse: CompileResponseInput
    code: String
    data: String
    from: String
    nrgLimit: Long
    nrgPrice: Long
    value: BigInteger
    isConstructor: Boolean
}

input ContractEventFilterInput {
    addresses: [String]
    expireTime: Long
    fromBlock: String
    toBlock: String
    topics: [String]
}

type DeployResponse {
    address: String
    txId: String
}

type TxReceipt {
    blockHash: String
    blockNumber: Long
    contractAddress: String
    cumulativeNrgUsed: Long
    from: String
    nrgConsumed: Long
    to: String
    txHash: String
    txIndex: String
}